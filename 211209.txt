# 앞으로 배울 내용
1. 프론트엔드 빌드 시스템 - NPM, Webpack
2. 자바스크립트 모듈화(AMD, Common.js, ES6 Modules)
3. 웹팩 개요(등장 배경, 철학)
4. 웹팩 주요 속성 4가지
5. 배포 환경에서 알고 있어야 할 웹팩의 특징과 설정



# Node.js와 NPM
* 웹팩을 사용하기 위해서는 Node.js(자바스크립트 실행 환경)와 NPM(명령어로 자바스크립트 라이브러리를 관리 해주는 도구) 이 컴퓨터에 설치되어 있어야 한다.


# NPM을 사용하는 이유, 장점
* 라이브러리의 버전과 의존성이 편하게 관리된다.
* 로컬에서 필요한 라이브러리를 쉽게 가져와서 사용이 가능하다.

# NPM 명령어
npm 초기화 명령어
npm init
npm init -y (package.json 기본값으로 생성)

npm 설치 명령어
npm install 라이브러리 명

devDependencies에 설치
npm i(=== install) 라이브러리 명 -D

npm 전역 설치 명령어(시스템 레벨의 전역)
npm install 라이브러리 명 --global 

npm 삭제 명령어
npm uninstall 라이브러리 명 
*package.json에 설치된 라이브러리와 버전이 저장된다.

# 배포용 라이브러리(dependencies), 개발용 라이브러리(devDependencies)의 차이
* dependencies는 화면의 로직과 직접적 연관이 있는 라이브러리들(배포용 라이브러리)
* devDependencies는 개발을 할 때 도와주는 개발 보조 라이브러리들(개발용 라이브러리)
  - 최종 배포 시 devDependencies는 포함되지 않는다.

# 웹팩이란?
* 웹 애플리케이션을 구성하는 자원들을 각각의 모듈로 보고 이를 조합해서 병합해서 하나의 결과물로 만드는 도구

# 모듈 번들링이란?
* 웹 애플리케이션을 구성하는 자원들을 하나의 파일로 병합 및 압축해주는 동작

# 웹팩 맛보기 튜토리얼 해보기
* https://joshua1988.github.io/webpack-guide/getting-started.html#%EC%9B%B9%ED%8C%A9-%EB%A7%9B%EB%B3%B4%EA%B8%B0-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC

# 웹팩 설정 파일
* webpack.config.js 파일에서 웹팩 관련 설정을 따로 할 수 있다.